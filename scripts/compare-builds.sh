#!/bin/bash

# Build Comparison Script
# Compares Travis CI and GitHub Actions build results

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

print_header() {
    echo
    print_status $BLUE "=== $1 ==="
}

# Function to check build artifacts
check_artifacts() {
    print_header "Checking Build Artifacts"
    
    if [ -f "target/javamail4ews.jar" ]; then
        JAR_SIZE=$(stat -f%z target/javamail4ews.jar 2>/dev/null || stat -c%s target/javamail4ews.jar)
        print_status $GREEN "✅ Main JAR found: $(ls -lh target/javamail4ews.jar | awk '{print $5}')"
        
        # Check JAR contents
        echo "JAR contents (first 10 entries):"
        jar tf target/javamail4ews.jar | head -10
    else
        print_status $RED "❌ Main JAR not found"
    fi
    
    if [ -d "target/lib" ] && [ "$(ls -A target/lib)" ]; then
        DEP_COUNT=$(ls target/lib/*.jar 2>/dev/null | wc -l)
        print_status $GREEN "✅ Dependencies found: $DEP_COUNT JAR files"
    else
        print_status $YELLOW "⚠️ Dependencies directory empty or missing"
    fi
}

# Function to check test results
check_test_results() {
    print_header "Checking Test Results"
    
    if [ -d "target/surefire-reports" ]; then
        TEST_FILES=$(find target/surefire-reports -name "*.xml" | wc -l)
        print_status $GREEN "✅ Test reports found: $TEST_FILES files"
        
        # Parse test results if available
        if command -v xmllint &> /dev/null; then
            TOTAL_TESTS=0
            FAILED_TESTS=0
            
            for file in target/surefire-reports/TEST-*.xml; do
                if [ -f "$file" ]; then
                    TESTS=$(xmllint --xpath "//testsuite/@tests" "$file" 2>/dev/null | sed 's/tests="//g' | sed 's/"//g' || echo "0")
                    FAILURES=$(xmllint --xpath "//testsuite/@failures" "$file" 2>/dev/null | sed 's/failures="//g' | sed 's/"//g' || echo "0")
                    
                    TOTAL_TESTS=$((TOTAL_TESTS + TESTS))
                    FAILED_TESTS=$((FAILED_TESTS + FAILURES))
                fi
            done
            
            print_status $BLUE "Test Summary: $TOTAL_TESTS total, $FAILED_TESTS failed"
        fi
    else
        print_status $YELLOW "⚠️ No test reports found"
    fi
}

# Function to check Maven build info
check_maven_info() {
    print_header "Maven Build Information"
    
    echo "Maven version:"
    mvn --version | head -3
    
    echo
    echo "Java version:"
    java -version 2>&1 | head -3
    
    echo
    echo "Project version:"
    mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "Unable to determine"
}

# Function to generate comparison report
generate_comparison_report() {
    print_header "Generating Comparison Report"
    
    local report_file="build-comparison-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$report_file" << EOF
# Build Comparison Report

**Generated:** $(date)
**Commit:** $(git rev-parse --short HEAD 2>/dev/null || echo "Unknown")
**Branch:** $(git branch --show-current 2>/dev/null || echo "Unknown")

## Environment Information

### Java Version
\`\`\`
$(java -version 2>&1)
\`\`\`

### Maven Version
\`\`\`
$(mvn --version)
\`\`\`

## Build Artifacts

### Main JAR
$(if [ -f "target/javamail4ews.jar" ]; then
    echo "- ✅ **Present**: $(ls -lh target/javamail4ews.jar | awk '{print $5}')"
else
    echo "- ❌ **Missing**"
fi)

### Dependencies
$(if [ -d "target/lib" ] && [ "$(ls -A target/lib)" ]; then
    echo "- ✅ **Present**: $(ls target/lib/*.jar 2>/dev/null | wc -l) JAR files"
    echo "- **Total Size**: $(du -sh target/lib 2>/dev/null | cut -f1 || echo "Unknown")"
else
    echo "- ❌ **Missing or Empty**"
fi)

## Test Results

$(if [ -d "target/surefire-reports" ]; then
    echo "- ✅ **Test Reports**: $(find target/surefire-reports -name "*.xml" | wc -l) files"
else
    echo "- ❌ **No Test Reports Found**"
fi)

## Build Process

### Commands Used
\`\`\`bash
mvn clean compile test package
\`\`\`

### Build Status
$(if [ -f "target/javamail4ews.jar" ]; then
    echo "✅ **SUCCESS** - All artifacts generated"
else
    echo "❌ **FAILED** - Missing artifacts"
fi)

---
*Generated by build comparison script*
EOF
    
    print_status $GREEN "✅ Comparison report generated: $report_file"
    echo "Review this report and compare with results from other CI systems."
}

# Main execution
main() {
    print_header "Build Comparison Analysis"
    echo "Analyzing current build results for comparison with other CI systems."
    echo
    
    check_maven_info
    check_artifacts
    check_test_results
    generate_comparison_report
    
    print_header "Analysis Complete"
    echo "Use the generated report to compare with Travis CI or other build results."
}

# Run main function
main "$@"