name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
  MAVEN_SETTINGS: ${{ github.workspace }}/settings.xml

jobs:
  release-build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.version.outputs.artifact-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        settings-path: ${{ github.workspace }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        VERSION=${TAG#v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "artifact-name=javamail4ews-${VERSION}" >> $GITHUB_OUTPUT
        echo "Release version: ${VERSION}"
        
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false -s settings.xml
        
    - name: Validate project
      run: mvn validate -s settings.xml
      
    - name: Run tests
      run: mvn clean test -s settings.xml
      
    - name: Run baseline tests
      run: mvn test -Pbaseline-tests -s settings.xml
      
    - name: Build and package
      run: mvn package -DskipTests -s settings.xml
      
    - name: Verify package contents
      run: |
        echo "=== Release JAR file ==="
        ls -la target/*.jar
        echo "=== Dependencies ==="
        ls -la target/lib/
        echo "=== JAR contents (first 20 entries) ==="
        jar tf target/javamail4ews.jar | head -20
        
    - name: Create release archive
      run: |
        mkdir -p release-artifacts
        cp target/javamail4ews.jar release-artifacts/${{ steps.version.outputs.artifact-name }}.jar
        cp -r target/lib release-artifacts/
        cd release-artifacts
        tar -czf ${{ steps.version.outputs.artifact-name }}.tar.gz *.jar lib/
        zip -r ${{ steps.version.outputs.artifact-name }}.zip *.jar lib/
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          release-artifacts/${{ steps.version.outputs.artifact-name }}.jar
          release-artifacts/${{ steps.version.outputs.artifact-name }}.tar.gz
          release-artifacts/${{ steps.version.outputs.artifact-name }}.zip
          release-artifacts/lib/
        retention-days: 90

  deploy-github:
    name: Deploy to GitHub Packages
    runs-on: ubuntu-latest
    needs: release-build
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        settings-path: ${{ github.workspace }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ needs.release-build.outputs.version }} -DgenerateBackupPoms=false -s settings.xml
        
    - name: Build for deployment
      run: mvn clean package -DskipTests -s settings.xml
      
    - name: Deploy to GitHub Packages
      run: mvn deploy -DskipTests -s settings.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release-build, deploy-github]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: release-artifacts/
        
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION=${{ needs.release-build.outputs.version }}
        echo "## Release Notes for v${VERSION}" > release-notes.md
        echo "" >> release-notes.md
        echo "### Changes" >> release-notes.md
        echo "- Built with Java 21" >> release-notes.md
        echo "- Updated dependencies as per project requirements" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Artifacts" >> release-notes.md
        echo "- \`${{ needs.release-build.outputs.artifact-name }}.jar\` - Main application JAR" >> release-notes.md
        echo "- \`${{ needs.release-build.outputs.artifact-name }}.tar.gz\` - Complete distribution (JAR + dependencies)" >> release-notes.md
        echo "- \`${{ needs.release-build.outputs.artifact-name }}.zip\` - Complete distribution (JAR + dependencies)" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Installation" >> release-notes.md
        echo "The package is also available via GitHub Packages Maven repository." >> release-notes.md
        echo "" >> release-notes.md
        echo "### Dependencies" >> release-notes.md
        echo "All runtime dependencies are included in the \`lib/\` directory of the distribution archives." >> release-notes.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ needs.release-build.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(needs.release-build.outputs.version, '-') }}
        files: |
          release-artifacts/${{ needs.release-build.outputs.artifact-name }}.jar
          release-artifacts/${{ needs.release-build.outputs.artifact-name }}.tar.gz
          release-artifacts/${{ needs.release-build.outputs.artifact-name }}.zip
        token: ${{ secrets.GITHUB_TOKEN }}